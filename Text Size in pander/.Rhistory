install.packages("RPostgresSQL")
install.packages("RPostgreSQL")
install.packages("sqldf")
library(sqldf)
options(sqldf.RPostgreSQL.user ="postgres",
sqldf.RPostgreSQL.password ="W0pLEtaE",
sqldf.RPostgreSQL.dbname ="kippcolorado",
sqldf.RPostgreSQL.host ="illuminateed.com",
sqldf.RPostgreSQL.port =5436)
sqldf('SELECT *
FROM users
LIMIT 50')
sqldf('SELECT *
FROM terms
LIMIT 50')
options(sqldf.RPostgreSQL.user ="kippcolorado",
sqldf.RPostgreSQL.password ="W0pLEtaE",
sqldf.RPostgreSQL.dbname ="kippcolorado",
sqldf.RPostgreSQL.host ="illuminateed.com",
sqldf.RPostgreSQL.port =5436)
sqldf('SELECT *
FROM terms
LIMIT 50')
options(sqldf.RPostgreSQL.user ="kippcolorado",
sqldf.RPostgreSQL.password ="W0pLEtaE",
sqldf.RPostgreSQL.dbname ="kippcolorado",
sqldf.RPostgreSQL.host ="illuminateed.com",
sqldf.RPostgreSQL.port =5436)
sqldf('SELECT *
FROM terms
LIMIT 50')
options(sqldf.RPostgreSQL.user ="kippcolorado",
sqldf.RPostgreSQL.password ="W0pLEtaE",
sqldf.RPostgreSQL.dbname ="kippcolorado",
sqldf.RPostgreSQL.host ="db.illuminateed.com",
sqldf.RPostgreSQL.port =5436)
sqldf('SELECT *
FROM terms
LIMIT 50')
sqldf('SELECT *
FROM users
LIMIT 50')
install.packages("devtools")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RPostgres")
install.packages("stringr")
install.packages("Rtools")
?dbFetch
?dbSendQuery
library(DBI)
# Connect to a specific postgres database i.e. Heroku
con <- dbConnect(RPostgres::Postgres(),dbname = 'kippcolorado',
host = 'illuminateed.com', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5436, # or any other port specified by your DBA
user = 'kippcolorado',
password = 'W0pLEtaE')
res <- dbSendQuery('SELECT * FROM users LIMIT 10')
dbFetch(res)
install.packages('RPostgres')
library(RPostgres)
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RPostgres")
library(DBI)
library(RPostgres)
# Connect to a specific postgres database i.e. Heroku
con <- dbConnect(RPostgres::Postgres(),dbname = 'kippcolorado',
host = 'illuminateed.com', # i.e. 'ec2-54-83-201-96.compute-1.amazonaws.com'
port = 5436, # or any other port specified by your DBA
user = 'kippcolorado',
password = 'W0pLEtaE')
res <- dbSendQuery('SELECT * FROM users LIMIT 10')
dbFetch(res)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
con <- dbConnect(drv,
dbname="db:kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
con <- dbConnect(drv,
dbname="kippcolorado",
host="illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
?dbConnect
?RPostgreSQL
library(RPostgreSQL)
?RPostgreSQL
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
con <- dbConnect(drv,
dbname="db:kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
con <- dbConnect(drv,
dbname="db:kippcolorado",
host="illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
?dbConnect
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
dbDisconnect(con)
library(RPostgreSQL)
detach(RPostgreSQL)
detach('RPostgreSQL')
?options
library(sqldf)
options(sqldf.RPostgreSQL.user ="kippcolorado",
sqldf.RPostgreSQL.password ="W0pLEtaE",
sqldf.RPostgreSQL.dbname ="kippcolorado",
sqldf.RPostgreSQL.host ="db.illuminateed.com",
sqldf.RPostgreSQL.port =5436)
sqldf("SELECT * FROM users LIMIT 50")
?dbConnect
con <- dbConnect("Postgres",
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
library(RPostgreSQL)
con <- dbConnect("Postgres",
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
con <- dbConnect("Postgres()",
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
con <- dbConnect(Postgres(),
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE",
sslmode = "require")
drv <- dbDriver("PostgreSQL", sslmode = "require")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname="kippcolorado",
host="db.illuminateed.com",
port=5436,
user="kippcolorado",
password="W0pLEtaE")
url <- "https://app.liveschoolinc.com//v2/updates?roster=40098&from=2015-08-06%2018:54:44&type=points"
points <- download.file(url, destfile)
destfile <- "ls.export.csv"
points <- download.file(url, destfile)
points <- download.file(url, destfile, method = "curl")
points <- download.file(url, destfile, method = "wininet")
points <- fromJSon(destfile, flatten = TRUE)
points <- fromJSON(destfile, flatten = TRUE)
library(jsonlite)
points <- fromJSON(destfile, flatten = TRUE)
install.packages('HiClimR')
fast_cor <- function(a,b) {
mat  <- rbind(a, b);
mat  <- mat - rowMeans(mat);
mat  <- mat / sqrt(rowSums(mat^2));
cr   <- tcrossprod(mat)
edge <- dim(a_mat)[1]
cr   <- t(cr[1:edge, -c(1:edge)])
return(cr)
}
nprots <- 50 #usually ca. 5000
ngenes <- 10000 #usually ca. 20000
a_mat <- matrix( runif(40*nprots, 120, 116000), ncol=40)
b_mat <- matrix( runif(40*ngenes, 0.1, 1000), ncol=40)
system.time(apply( a_mat, 1, function(xx)
apply(b_mat, 1, cor, y = xx, use = "pairwise.complete.obs")) -> c_1)
system.time(c_2 <- fast_cor(a_mat, b_mat))
system.time(c_3 <- HiClimR::fastCor(rbind(a, b)))
system.time(c_3 <- HiClimR::fastCor(rbind(a_mat, b_mat)))
install.packages("googlesheets")
devtools::install_github("hadley/readr")
devtools::install_github("jennybc/googlesheets")
devtools::install_github("hadley/readr")
devtools::install_github("jennybc/googlesheets")
install.packages("googlesheets")
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR()
install.packages('googlesheets')
q()
library(kippco)
?odbcQuery2
act.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\interim1_results.sql"
dsn <- "Colorado_Illuminate_64"
act <- odbcQuery2(dsn, act.file)
act
library(kippco)
act.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\interim1_results.sql"
dsn <- "Colorado_Illuminate_64"
act <- odbcQuery2(dsn, act.file)
library(kippco)
act.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\interim1_results.sql"
dsn <- "Colorado_Illuminate_64"
act <- odbcQuery2(dsn, act.file)
library(kippco)
map.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\MAPspring2015.txt"
act.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\interim1_results.sql"
dsn <- "Colorado_Illuminate_64"
map <- odbcQuery(dsn, map.file)
act <- odbcQuery(dsn, act.file)
map <- odbcQuery2(dsn, map.file)
act <- odbcQuery2(dsn, act.file)
library(kippco)
map.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\MAPspring2015.txt"
act.file <- "C:\\Users\\psetter\\Google Drive\\Data Department Docs\\SQL Queries\\Assessments\\interim1_results.sql"
dsn <- "Colorado_Illuminate_64"
map <- odbcQuery2(dsn, map.file)
act <- odbcQuery2(dsn, act.file)
map
setwd("C:/Users/psetter/Google Drive/Data Department Docs/R/Core Data")
## Copyright KIPP Colorado Schools 2016
## Create studemo file for upload to Illuminate Core Data
#########
## Library Calls
library(dplyr)
library(kippco)
library(tidyr)
########
## Read in Data
studemo.raw <- CombineCSV('IC Downloads\\studemo')
contacts.raw <- CombineCSV('IC Downloads\\contacts', stringsAsFactors = FALSE, na.strings = '')
enrollment.raw <- CombineCSV('IC Downloads\\enrollment', stringsAsFactors = FALSE)
########
## Enrollment
enrollment.final <- enrollment.raw %>%
mutate(SiteID = substr(School.Name.Year, 1, 3),
LeaveDate = as.Date(End.Date, '%m/%d/%Y'),
GradeLevelID = Grade + 1,
AcademicYear = paste0('20',
substr(School.Name.Year,
nchar(School.Name.Year) - 1,
nchar(School.Name.Year))),
EnrollmentEntryCode = paste0('IC_', Start.Status),
ExitCodeID = ifelse(!is.na(End.Status), paste0('IC_', End.Status), '')
) %>%
CaseStatement(sed,
SiteID == 306 & as.Date(Start.Date, '%m/%d/%Y') < as.Date('2015-08-17') ~ as.Date('2015-08-17'),
SiteID != 306 & as.Date(Start.Date, '%m/%d/%Y') < as.Date('2015-08-10') ~ as.Date('2015-08-10'),
~ as.Date(Start.Date, '%m/%d/%Y')
) %>%
mutate(EntryDate = as.Date(sed, '1970-01-01')) %>%
filter(LeaveDate > EntryDate | is.na(LeaveDate)
) %>%
select(
StudentID = ID..,
SiteID,
EntryDate,
LeaveDate,
GradeLevelID,
AcademicYear,
EnrollmentEntryCode,
ExitCodeID
)
write.table(enrollment.final, file = 'enrollment.txt', sep = '\t', quote = FALSE, row.names = FALSE,
na = '')
## Vector for validating other imports
enrolled.students <- enrollment.final$StudentID
########
## Studemo
studemo.final <- studemo.raw %>%
## Convert Yes/No to binary
mutate(primary.disability = as.numeric(substr(CustomStudent_ENRICH.PrimaryDisability, 1, 2)),
is.hispanic = ifelse(student.hispanicEthnicity == 'Y', 1, 0)) %>%
merge(x = enrollment.final, y = .,
by.x = 'StudentID',
by.y = 'student.studentNumber') %>%
select(StudentID,
state.student.id = student.stateID,
last.name = student.lastName,
first.name = student.firstName,
middle.name = student.middleName,
birth.date = student.birthdate,
gender = student.gender,
race = student.raceEthnicity,
is.hispanic,
primary.disability,
EntryDate,
grad.year = graduation.cohortYearNGA,
ell.code = CustomStudent_ELADistrict.StEngLngLnr,
corr.lang = CustomStudent_ELADistrict.CorrLng,
AcademicYear
) %>%
distinct(StudentID)
write.table(studemo.final, file = 'studemo.txt', sep = '\t', quote = FALSE, row.names = FALSE,
na = '')
########
## Contacts
contacts.final <- contacts.raw %>%
mutate(EmergencyContact = ifelse(contacts.seq == 1, 1, 0)) %>%
CaseStatement(Phone1Type,
!is.na(contacts.cellPhone) ~ 'Cell',
!is.na(contacts.homePhone) ~ 'Home',
!is.na(contacts.workPhone) ~ 'Work',
~ '') %>%
CaseStatement(Phone2Type,
!is.na(contacts.homePhone) & Phone1Type != 'Home' ~ 'Home',
!is.na(contacts.workPhone) & Phone1Type != 'Work' ~ 'Work',
~ '') %>%
CaseStatement(Phone1,
Phone1Type == 'Cell' ~ contacts.cellPhone,
Phone1Type == 'Home' ~ contacts.homePhone,
Phone1Type == 'Work' ~ contacts.workPhone,
~ '') %>%
CaseStatement(Phone2,
Phone2Type == 'Cell' ~ contacts.cellPhone,
Phone2Type == 'Home' ~ contacts.homePhone,
Phone2Type == 'Work' ~ contacts.workPhone,
~ '') %>%
select(
StudentID = student.studentNumber,
Address1 = contacts.addressLine1,
City = contacts.city,
State = contacts.state,
Zip = contacts.zip,
ContactLastName = contacts.lastName,
ContactFirstName = contacts.firstName,
IsLegalGuardian = contacts.guardian,
ContactType = contacts.relationship,
EmailAddress = contacts.email,
Phone1Type,
Phone1,
Phone2Type,
Phone2,
EmergencyContact,
HouseholdID = contacts.householdID
) %>%
filter(StudentID %in% enrolled.students)
write.table(contacts.final, file = 'contacts.txt', sep = '\t', quote = FALSE, row.names = FALSE,
na = '')
########
## Student Portal
student.portal <- as.data.frame(enrolled.students) %>%
rename(StudentID = enrolled.students) %>%
mutate(#Username = '',
Email = paste0(StudentID, '@climb.kippcolorado.org'),
EnablePassword = 1
#TempPassword = ''
)
write.table(student.portal, file = 'student_portal_accounts.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
########
## Parent Portal
parent.portal <- contacts.final %>%
filter(IsLegalGuardian == 1) %>%
mutate(Count = 1) %>%
select(ContactLastName, ContactFirstName, StudentID, Count) %>%
distinct %>%
group_by(ContactLastName, ContactFirstName) %>%
mutate(Student = cumsum(Count)) %>%
select(-Count) %>%
spread(key = Student, value = StudentID, fill = '')
write.table(parent.portal, file = 'parent_portal_accounts.txt',
sep = '\t', quote = FALSE, row.names = FALSE, na = '',
col.names = FALSE)
zip(zipfile = paste0('ICUpload-', Sys.Date()),
files = c('contacts.txt', 'parent_portal_accounts.txt',
'student_portal_accounts.txt', 'enrollment.txt',
'studemo.txt'))
setwd("~/blog/Text Size in pander")
c(1, 2, 3)
x <- c(1, 2, 3)
x[1]
x[2:]
x[2:3]
