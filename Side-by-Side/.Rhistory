TransposeDF
names(current.behavior) <- c('CPs Earned', 'ISS/OSS', 'Money Earned')
row.names(current.behavior) <- c('CPs Earned', 'ISS/OSS', 'Money Earned')
behavior <- odbcQuery2(dsn, behavior.file) %>%
NAreplacer(na.replace = 0)
pandoc.table
?pandoc.table
paste(0, sample(letters, 1000))
paste(0, sample(letters, 1000, replace = TRUE))
sample(letters, 1000, replace = TRUE)
comments <- as.data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = rep(paste(0, sample(letters, 1000, replace = TRUE)),3))
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = rep(paste(0, sample(letters, 1000, replace = TRUE)),3))
View(comments)
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = rep(paste0(sample(letters, 1000, replace = TRUE)),3))
paste0(sample(letters, 1000, replace = TRUE))
?sample
val <- paste0(sample(letters, 1000, replace = TRUE))
value
val
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = rep(paste0(unquotesample(letters, 1000, replace = TRUE))),3))
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = rep(paste0(unquote(sample(letters, 1000, replace = TRUE))),3))
?quote
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = rep(paste0(deparse(sample(letters, 1000, replace = TRUE))),3))
View(comments)
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.'))
library(dplyr)
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.')) %>%
mutate(comments = paste0('\\tiny', com))
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.')) %>%
mutate(comments = paste('\\tiny', com))
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.')) %>%
mutate(com = paste('\\tiny', com)) %>%
pandoc.table(split.table = Inf)
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.')) %>%
dplyr::mutate(com = paste('\\tiny', com)) dplyr::`%>%`
pander::pandoc.table(split.table = Inf)
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.')) %>%
mutate(com = paste('\\tiny', com)) %>%
pander::pandoc.table(split.table = Inf)
comments <- data.frame(names = c('Peter', 'Ryan', 'Anna'),
scores = c(100, 100, 100),
com = c('The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.',
'The command multirow takes three parameters. The first one is the number of rows to be combined, 3 in the example. The second parameter is the width of the column, 4em in the example. Finally, the third parameter is the content of the cell.')) %>%
#mutate(com = paste('{\\tiny', com, '}')) %>%
pander::pandoc.table(split.table = Inf)
setwd("C:/Users/psetter/Google Drive/Data Department Docs/R/Core Data")
## Copyright KIPP Colorado Schools 2016
## Create studemo file for upload to Illuminate Core Data
#########
## Library Calls
library(dplyr)
library(kippco)
library(tidyr)
########
## Read in Data
studemo.raw <- CombineCSV('IC Downloads\\studemo')
contacts.raw <- CombineCSV('IC Downloads\\contacts', stringsAsFactors = FALSE, na.strings = '')
enrollment.raw <- CombineCSV('IC Downloads\\enrollment', stringsAsFactors = FALSE)
########
## Enrollment
enrollment.final <- enrollment.raw %>%
mutate(SiteID = substr(School.Name.Year, 1, 3),
LeaveDate = as.Date(End.Date, '%m/%d/%Y'),
GradeLevelID = Grade + 1,
AcademicYear = paste0('20',
substr(School.Name.Year,
nchar(School.Name.Year) - 1,
nchar(School.Name.Year))),
EnrollmentEntryCode = paste0('IC_', Start.Status),
ExitCodeID = ifelse(!is.na(End.Status), paste0('IC_', End.Status), '')
) %>%
CaseStatement(sed,
SiteID == 306 & as.Date(Start.Date, '%m/%d/%Y') < as.Date('2015-08-17') ~ as.Date('2015-08-17'),
SiteID != 306 & as.Date(Start.Date, '%m/%d/%Y') < as.Date('2015-08-10') ~ as.Date('2015-08-10'),
~ as.Date(Start.Date, '%m/%d/%Y')
) %>%
mutate(EntryDate = as.Date(sed, '1970-01-01')) %>%
filter(LeaveDate > EntryDate | is.na(LeaveDate)
) %>%
select(
StudentID = ID..,
SiteID,
EntryDate,
LeaveDate,
GradeLevelID,
AcademicYear,
EnrollmentEntryCode,
ExitCodeID
)
write.table(enrollment.final, file = 'enrollment.txt', sep = '\t', quote = FALSE, row.names = FALSE,
na = '')
## Vector for validating other imports
enrolled.students <- enrollment.final$StudentID
########
## Studemo
studemo.final <- studemo.raw %>%
## Convert Yes/No to binary
mutate(primary.disability = as.numeric(substr(CustomStudent_ENRICH.PrimaryDisability, 1, 2)),
is.hispanic = ifelse(student.hispanicEthnicity == 'Y', 1, 0)) %>%
merge(x = enrollment.final, y = .,
by.x = 'StudentID',
by.y = 'student.studentNumber') %>%
select(StudentID,
state.student.id = student.stateID,
last.name = student.lastName,
first.name = student.firstName,
middle.name = student.middleName,
birth.date = student.birthdate,
gender = student.gender,
race = student.raceEthnicity,
is.hispanic,
primary.disability,
EntryDate,
grad.year = graduation.cohortYearNGA,
ell.code = CustomStudent_ELADistrict.StEngLngLnr,
corr.lang = CustomStudent_ELADistrict.CorrLng,
AcademicYear
) %>%
distinct(StudentID)
write.table(studemo.final, file = 'studemo.txt', sep = '\t', quote = FALSE, row.names = FALSE,
na = '')
########
## Contacts
contacts.final <- contacts.raw %>%
mutate(EmergencyContact = ifelse(contacts.seq == 1, 1, 0)) %>%
CaseStatement(Phone1Type,
!is.na(contacts.cellPhone) ~ 'Cell',
!is.na(contacts.homePhone) ~ 'Home',
!is.na(contacts.workPhone) ~ 'Work',
~ '') %>%
CaseStatement(Phone2Type,
!is.na(contacts.homePhone) & Phone1Type != 'Home' ~ 'Home',
!is.na(contacts.workPhone) & Phone1Type != 'Work' ~ 'Work',
~ '') %>%
CaseStatement(Phone1,
Phone1Type == 'Cell' ~ contacts.cellPhone,
Phone1Type == 'Home' ~ contacts.homePhone,
Phone1Type == 'Work' ~ contacts.workPhone,
~ '') %>%
CaseStatement(Phone2,
Phone2Type == 'Cell' ~ contacts.cellPhone,
Phone2Type == 'Home' ~ contacts.homePhone,
Phone2Type == 'Work' ~ contacts.workPhone,
~ '') %>%
select(
StudentID = student.studentNumber,
Address1 = contacts.addressLine1,
City = contacts.city,
State = contacts.state,
Zip = contacts.zip,
ContactLastName = contacts.lastName,
ContactFirstName = contacts.firstName,
IsLegalGuardian = contacts.guardian,
ContactType = contacts.relationship,
EmailAddress = contacts.email,
Phone1Type,
Phone1,
Phone2Type,
Phone2,
EmergencyContact,
HouseholdID = contacts.householdID
) %>%
filter(StudentID %in% enrolled.students)
write.table(contacts.final, file = 'contacts.txt', sep = '\t', quote = FALSE, row.names = FALSE,
na = '')
########
## Student Portal
student.portal <- as.data.frame(enrolled.students) %>%
rename(StudentID = enrolled.students) %>%
mutate(#Username = '',
Email = paste0(StudentID, '@climb.kippcolorado.org'),
EnablePassword = 1
#TempPassword = ''
)
write.table(student.portal, file = 'student_portal_accounts.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
########
## Parent Portal
parent.portal <- contacts.final %>%
filter(IsLegalGuardian == 1) %>%
mutate(Count = 1) %>%
select(ContactLastName, ContactFirstName, StudentID, Count) %>%
distinct %>%
group_by(ContactLastName, ContactFirstName) %>%
mutate(Student = cumsum(Count)) %>%
select(-Count) %>%
spread(key = Student, value = StudentID, fill = '')
write.table(parent.portal, file = 'parent_portal_accounts.txt',
sep = '\t', quote = FALSE, row.names = FALSE, na = '',
col.names = FALSE)
zip(zipfile = paste0('ICUpload-', Sys.Date()),
files = c('contacts.txt', 'parent_portal_accounts.txt',
'student_portal_accounts.txt', 'enrollment.txt',
'studemo.txt'))
?grid.arrange
?gridExtra::grid.arrange
setwd("C:/Users/psetter/Google Drive/Data Department Docs/R/KIPP CO Reading")
library(dplyr)
library(googlesheets)
library(tidyr)
library(zoo)
## Function definitions
`%not_in%` <- function(x, y) !(x %in% y)
WordsIn <- . %>%
read.csv(skip = 1,
header = TRUE) %>%
filter((PercentCorrect >= 0.6 & QuestionsPresented <= 10) | (PercentCorrect >= 0.7 & QuestionsPresented >= 10),
QuizTitle %not_in% wheatley) %>%
mutate(StudentId = as.character(StudentId),
StudentId = substr(StudentId, 1, 6)) %>%
select(StudentId, WordCount)
na.zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
########
## Read in data
## Excluded book list
wheatley <- read.csv('wheatley_books.csv')$title
## KDC from SRC & Google Sheet alt assignment
src.file <- list.files('src', '.csv')
src <- read.csv(paste0('src\\', src.file), header = TRUE) %>%
select(StudentId = SIS_ID, WordCount = SRC_WORDS_READ)
alt.object <- gs_title('KDC Alt Reading Assignment Tracker')
alt <- lapply(1:4, function (x) gs_read(alt.object, ws = x))
kdc <- alt %>%
## Tidy alternative assignment
do.call(rbind, .) %>%
na.zero %>%
gather(key = week, value = WordCount, -SID, -Name) %>%
## Filter for current month
mutate(month = as.yearmon(as.Date(gsub('X', '', week), format = '%m.%d.%Y'))) %>%
filter(month == as.yearmon(Sys.Date())) %>%
select(StudentId = SID, WordCount) %>%
rbind(src)
## All Others
ar.files <- list.files('ar', '.csv')
ar <- lapply(ar.files, function(x) WordsIn(paste0('ar\\', x))) %>%
do.call(rbind, .)
## Combine and write to file
words.read <- rbind(ar,
kdc
) %>%
group_by(StudentId) %>%
summarize(words = sum(as.numeric(WordCount), na.rm = TRUE))
write.csv(words.read,
file = "words_read.csv",
quote = FALSE,
row.names = FALSE)
kdc <- alt %>%
## Tidy alternative assignment
do.call(rbind, .)
alt.object <- gs_title('KDC Alt Reading Assignment Tracker')
alt <- lapply(1:4, function (x) gs_read(alt.object, ws = x))
kdc <- alt %>%
## Tidy alternative assignment
do.call(rbind, .) %>%
na.zero %>%
gather(key = week, value = WordCount, -SID, -Name) %>%
## Filter for current month
mutate(month = as.yearmon(as.Date(gsub('X', '', week), format = '%m.%d.%Y'))) %>%
filter(month == as.yearmon(Sys.Date())) %>%
select(StudentId = SID, WordCount) %>%
rbind(src)
words.read <- rbind(ar,
kdc
) %>%
group_by(StudentId) %>%
summarize(words = sum(as.numeric(WordCount), na.rm = TRUE))
write.csv(words.read,
file = "words_read.csv",
quote = FALSE,
row.names = FALSE)
setwd("C:/Users/psetter/Google Drive/Data Department Docs/R/KDC Tiger Report")
dsn <- "Colorado_Illuminate_64"
## Function Definitions
na.zero <- function (x) {
x[is.na(x)] <- 0
return(x)
}
grade.file <- '..\\..\\SQL\\grades\\kdc_gradebook.sql'
behavior.file <- '..\\..\\SQL\\liveschool\\kdc_ls_progress_report.sql'
behavior.log.file <- '..\\..\\SQL\\liveschool\\kdc_ls_behavior_log.sql'
words.file <- '..\\..\\SQL\\third_party_apps\\words_read.sql'
grades <- odbcQuery2(dsn, grade.file)
behavior <- odbcQuery2(dsn, behavior.file) %>%
na.zero()
behavior.log <- odbcQuery2(dsn, behavior.log.file) %>%
mutate(comments = as.character(comments))
words <- odbcQuery2(dsn, words.file) %>%
na.zero() %>%
mutate(total = aug + sep + oct + nov + dec + jan + feb + mar + apr) %>%
select(local_student_id, current = apr, total)
grade.file <- '..\\..\\SQL\\grades\\kdc_gradebook.sql'
behavior.file <- '..\\..\\SQL\\liveschool\\kdc_ls_progress_report.sql'
behavior.log.file <- '..\\..\\SQL\\liveschool\\kdc_ls_behavior_log.sql'
words.file <- '..\\..\\SQL\\third_party_apps\\words_read.sql'
grades <- odbcQuery2(dsn, grade.file)
behavior <- odbcQuery2(dsn, behavior.file) %>%
na.zero()
behavior.log <- odbcQuery2(dsn, behavior.log.file) %>%
mutate(comments = as.character(comments))
words <- odbcQuery2(dsn, words.file) %>%
na.zero() %>%
mutate(total = aug + sep + oct + nov + dec + jan + feb + mar + apr) %>%
select(local_student_id, current = apr, total)
grade.file <- '..\\..\\SQL\\grades\\kdc_gradebook.sql'
behavior.file <- '..\\..\\SQL\\liveschool\\kdc_ls_progress_report.sql'
behavior.log.file <- '..\\..\\SQL\\liveschool\\kdc_ls_behavior_log.sql'
words.file <- '..\\..\\SQL\\third_party_apps\\words_read.sql'
grades <- odbcQuery2(dsn, grade.file)
behavior <- odbcQuery2(dsn, behavior.file) %>%
na.zero()
behavior.log <- odbcQuery2(dsn, behavior.log.file) %>%
mutate(comments = as.character(comments))
words <- odbcQuery2(dsn, words.file) %>%
na.zero() %>%
mutate(total = aug + sep + oct + nov + dec + jan + feb + mar + apr) %>%
select(local_student_id, current = apr, total)
dsn <- "Colorado_Illuminate_64"
grade.file <- '..\\..\\SQL\\grades\\kdc_gradebook.sql'
behavior.file <- '..\\..\\SQL\\liveschool\\kdc_ls_progress_report.sql'
behavior.log.file <- '..\\..\\SQL\\liveschool\\kdc_ls_behavior_log.sql'
words.file <- '..\\..\\SQL\\third_party_apps\\words_read.sql'
grades <- odbcQuery2(dsn, grade.file)
behavior <- odbcQuery2(dsn, behavior.file) %>%
na.zero()
behavior.log <- odbcQuery2(dsn, behavior.log.file) %>%
mutate(comments = as.character(comments))
words <- odbcQuery2(dsn, words.file) %>%
na.zero() %>%
mutate(total = aug + sep + oct + nov + dec + jan + feb + mar + apr) %>%
select(local_student_id, current = apr, total)
########
## Get list of students
student.list <- grades %>%
distinct(s_studentid) %>%
arrange(s_grade, enr_advisor, s_lastfirst) %>%
select(s_studentid, s_lastfirst, s_grade, enr_advisor)
grades <- odbcQuery2(dsn, grade.file)
grades <- odbcQuery2(dsn, grade.file)
behavior <- odbcQuery2(dsn, behavior.file) %>%
na.zero()
words <- odbcQuery2(dsn, words.file) %>%
na.zero() %>%
mutate(total = aug + sep + oct + nov + dec + jan + feb + mar + apr) %>%
select(local_student_id, current = apr, total)
gpa.current <- grades %>%
filter(enr_coursename != 'Advisory') %>%
group_by(s_studentid) %>%
summarize(gpa = mean(score_gpa_weighted) %>% round(2))
release.list <- merge(student.list, behavior,
by.x = 's_studentid',
by.y = 'local_student_id') %>%
# 12th grade only until three weeks in
filter(s_grade >= 11,
three_weeks >= 0,
two_weeks >= 0,
last_week >= 0) %>%
mutate(Release = 'Release') %>%
select(grade = s_grade,
advisor = enr_advisor,
studentid = s_studentid,
name = s_lastfirst,
Release) %>%
arrange(grade, advisor, name)
student.list <- grades %>%
distinct(s_studentid) %>%
arrange(s_grade, enr_advisor, s_lastfirst) %>%
select(s_studentid, s_lastfirst, s_grade, enr_advisor)
release.list <- merge(student.list, behavior,
by.x = 's_studentid',
by.y = 'local_student_id') %>%
# 12th grade only until three weeks in
filter(s_grade >= 11,
three_weeks >= 0,
two_weeks >= 0,
last_week >= 0) %>%
mutate(Release = 'Release') %>%
select(grade = s_grade,
advisor = enr_advisor,
studentid = s_studentid,
name = s_lastfirst,
Release) %>%
arrange(grade, advisor, name)
overall.file <- '..\\..\\SQL\\assessments\\EPAS\\epas_overall.sql'
overall <- odbcQuery2(dsn, overall.file)
scale.conversion <- read.csv('..\\act_student_sheets\\scale_conversion.csv')
scaled <- overall %>%
mutate(form = gsub('.*\\(||\\).*', '', ass_assessmentname)) %>%
merge(x = ., y = scale.conversion,
by.x = c('form', 'ass_subject', 'score_rawscore'),
by.y = c('form', 'subject', 'raw'),
all.x = TRUE) %>%
filter(ass_tnumber %in% c('Diagnostic', 'Interim 4'),
s_grade == 11) %>%
group_by(s_studentid, ass_tnumber) %>%
summarize(composite = round(mean(scale))) %>%
mutate(growth = composite - lag(composite)) %>%
filter(!is.na(growth))
trip.list <- merge(student.list, behavior,
by.x = 's_studentid',
by.y = 'local_student_id') %>%
merge(x = ., y = gpa.current,
by.x = 's_studentid',
by.y = 's_studentid') %>%
merge(x = ., y = words,
by.x = 's_studentid',
by.y = 'local_student_id') %>%
merge(x = ., y = scaled,
by.x = 's_studentid',
by.y = 's_studentid',
all.x = TRUE) %>%
rename(total.words = total,
grade = s_grade) %>%
select(-current, -ass_tnumber, -composite) %>%
CaseStatement(trip.behavior,
grade %in% c(11, 12) & three_weeks >= 0 & two_weeks >= 0 & last_week >= 0 ~ 1,
grade %in% c(9, 10) & semester_balance > 0 ~ 1,
~ 0) %>%
CaseStatement(trip.act,
growth >= 3 ~ 1,
~ 0) %>%
mutate(trip.reading = ifelse(total.words >= 300000, 1, 0),
trip.gpa = ifelse(gpa >= 2.75, 1, 0),
trip = ifelse(trip.behavior + trip.reading + trip.gpa + trip.act >= 2, 'Yes', 'No')) %>%
arrange(grade, enr_advisor, s_lastfirst)
write.xlsx(trip.list, file = 'trip_list.xlsx', row.names = FALSE)
setwd("~/blog/Side-by-Side")
cat('\\begin{center}')
cat('\\begin{tabular}{ c c c }')
print(knitr::kable(my.table, format = 'latex'))
cat('&')
print(knitr::kable(my.table, format = 'latex'))
cat('&')
print(knitr::kable(my.table, format = 'latex'))
cat('\\end{tabular}')
cat('\\end{center}')
my.table <- mtcars[1:5, 1:5]
cat('\\begin{center}')
cat('\\begin{tabular}{ c c c }')
print(knitr::kable(my.table, format = 'latex'))
cat('&')
print(knitr::kable(my.table, format = 'latex'))
cat('&')
print(knitr::kable(my.table, format = 'latex'))
cat('\\end{tabular}')
cat('\\end{center}')
library(grid)
library(gridExtra)
library(gtable)
CustomTable <- function(df, row.names = rownames(df), font.size = 8) {
theme1 <- ttheme_minimal(
core=list(fg_params=list(fontsize = font.size, hjust = 0)),
colhead=list(fg_params=list(fontsize = font.size)),
rowhead=list(fg_params=list(fontsize = font.size))
)
horiztonal <- replicate(nrow(df),
segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(1,"npc"),
y1 = unit(0,"npc"),
gp = gpar(lwd = 1)),
simplify = FALSE
)
g <- tableGrob(df, theme = theme1, rows = row.names)
g <- gtable_add_grob(g, grobs = horiztonal,
t = seq_len(nrow(g)-1), b = seq_len(nrow(g)-1), l = 1, r = ncol(g))
g
}
my.table <- mtcars[1:5, 1:5]
grid.arrange(CustomTable(my.table), CustomTable(my.table), nrow = 1)
setwd("C:/Users/psetter/Google Drive/Data Department Docs/R/rc-kspa-new")
setwd("~/blog/Side-by-Side")
